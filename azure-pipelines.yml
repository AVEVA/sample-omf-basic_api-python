trigger:
  batch: true
  branches:
    include:
      - main

pr:
  branches:
    include:
      - main

schedules:
  - cron: '0 0 * * 0'
    displayName: Weekly build
    branches:
      include:
        - main
    always: true

resources:
  repositories:
    - repository: OpsGuildAutomationRepo
      type: git
      name: Engineering/OpsGuild.Automation
      ref: refs/heads/main
    - repository: templates
      type: github
      name: osisoft/OSI-Samples
      endpoint: osisoft/OSI-Samples

variables:
  - template: '/miscellaneous/build_templates/variables.yml@templates'
  - name: analysisProject
    value: OMF_API_Python

parameters:
  - name: containerDemandsADH
    default: Agent.OS -equals Linux
  - name: containerDemandsEDS
    default: PYTHON
  - name: containerDemandsOnPrem
    default: Agent.OS -equals Linux


jobs:
  - job: Tests_ADH
    condition: ne(variables['Build.Reason'], 'Schedule')
    pool:
      name: 00-OSIManaged-Containers
      demands: ${{ parameters.containerDemandsADH }}
    variables:
      - name: Endpoints.0.Selected
        value: true
      - name: Endpoints.1.Selected
        value: false
      - name: Endpoints.2.Selected
        value: false
      - name: Endpoints.0.TenantId
        value: $(TenantId)
      - name: Endpoints.0.NamespaceId
        value: $(NamespaceId)
      - name: Endpoints.0.ClientId
        value: $(ClientId)
      - name: Endpoints.0.ClientSecret
        value: $(ClientSecret)
      - name: Endpoints.0.Resource
        value: $(Resource)
    steps:
      - template: '/miscellaneous/build_templates/appsettings.yml@templates'
        parameters:
          secrets: 'TenantId, NamespaceId, ClientId, ClientSecret, Resource'

      - script: |
          echo Install tools
          pip install setuptools wheel
          pip install unittest-xml-reporting    
          pip install pytest
          pip install pytest-cov
          echo Install requirements
          pip install -r requirements.txt
          echo Run tests
          python -m pytest ./test.py --junitxml=junit/test-results.xml 
          echo Complete
        displayName: 'Run tests'

      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testResultsFiles: '**/test-*.xml'
          failTaskOnFailedTests: true
          testRunTitle: '$(Agent.JobName) on $(Agent.OS)'
        displayName: 'Publish test results'

  - job: Tests_OnPrem
    condition: ne(variables['Build.Reason'], 'Schedule')
    pool:
      name: 00-OSIManaged-Containers
      demands: ${{ parameters.containerDemandsOnPrem }}
    variables:
      - name: Endpoints.0.Selected
        value: false
      - name: Endpoints.1.Selected
        value: false
      - name: Endpoints.2.Selected
        value: true
      - name: Endpoints.2.Resource
        value: $(PIWebAPI)
      - name: Endpoints.2.Username
        value: $(Username)
      - name: Endpoints.2.Password
        value: $(Password)
      - name: Endpoints.2.DataArchiveName
        value: $(DataArchiveName)
      - name: Endpoints.2.VerifySSL
        value: false
    steps:
      - template: '/miscellaneous/build_templates/appsettings.yml@templates'
        parameters:
          secrets: 'Username, Password, PIWebAPI, DataArchiveName'

      - script: |
          echo Install tools
          pip install setuptools wheel
          pip install unittest-xml-reporting    
          pip install pytest
          pip install pytest-cov
          echo Install requirements
          pip install -r requirements.txt
          echo Run tests
          python -m pytest ./test.py --junitxml=junit/test-results.xml 
          echo Complete
        displayName: 'Run tests'

      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testResultsFiles: '**/test-*.xml'
          failTaskOnFailedTests: true
          testRunTitle: '$(Agent.JobName) on $(Agent.OS)'
        displayName: 'Publish test results'

  - job: Tests_EDS
    condition: ne(variables['Build.Reason'], 'Schedule')
    pool:
      name: 00-OSIManaged-Build
      demands: ${{ parameters.containerDemandsEDS }}
    variables:
      - name: Endpoints.0.Selected
        value: false
      - name: Endpoints.1.Selected
        value: true
      - name: Endpoints.2.Selected
        value: false
    steps:
      - template: '/miscellaneous/build_templates/appsettings.yml@templates'

      - script: |
          echo Install tools
          pip install setuptools wheel
          pip install unittest-xml-reporting    
          pip install pytest
          pip install pytest-cov
          echo Install requirements
          pip install -r requirements.txt
          echo Run tests
          python -m pytest ./test.py --junitxml=junit/test-results.xml 
          echo Complete
        displayName: 'Run tests'

      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testResultsFiles: '**/test-*.xml'
          failTaskOnFailedTests: true
          testRunTitle: '$(Agent.JobName) on $(Agent.OS)'
        displayName: 'Publish test results'

  - template: '/miscellaneous/build_templates/code-analysis.yml@templates'
    parameters:
      useRequirementsTxt: true
